
1.1 починить логику высчитывания если rate = 1 
2. загрузка Шаблона файла сотрудников 
3. Улучшение стандартной модели user 
4. Создание возможности гружения фото для STAFF (учитыать что грузится будет .zip а имя файла это id сотрудника)
5. Сериализаторы кастомные + стандартные 
6. DRF логика для фронта по описанию интерфейса примерно понятно что нужно:
        Доступ к страницам только isAuthenticated
    ---- api/staff/ -- вернет всех staff за вчерашнюю дату по умолчанию, можно передать get параметры за какой период
    ---- api/department/ -- тоже самое но только по отделам (child)
    ---- api/staff/<user_id>/ -- инфа по пользователю первый и последний вход (за вчерашний день), процент честности (за выбранный период), высчитывание премиальных от процента честности для этого можно учитывать зп чистую, чем выше процент честности тем больше премиальных  (не 1 к 1 допустим 80% честности = 10% зп <--- просто пример для себя же)



N-4. Подключить Кэш
N-3. API REQUESTS к другой системе для получения нужных данных 
N-2. Используя KPI высчитывать премиальный (придумать просмотр логики допустим от 3 месяцев до 1 года)
N-1. Переезд на DRF + REACT
N-0.5 Сделать Полный React интерфейс для 
    ---- Использование токенов для авторизации 
    ---- просмотр в таблице всех
    ---- просмотр в таблице по отделам
    ---- точная информация по выбранному пользователю (ссылки по имени на подробную инфу), тут же можно показывать премиальные и коэфицент честности 
    ---- .....
N. Перевод админки на русский.
N+1. кастомная админка с выполнением на лету.
N+2. Успеть дописать DOCSTRING 
N+3. Swagger 
N+4. Развернуться на Linux


COMPLETED:
1.агрузка шаблонов отдела с автосозданием родительского и ребенка (КЛАССОВОЕ view).
2.Автовысчитывание чистой зп. (возможны правки тк чутка не правильно высчитывает)
3.template и filter тэги (придумать куда использовать)
4. post\pre reciever чтобы проверять колличество rate не более 2 в сумме, для автовысчета total_salary (Pre save все починил)