8. Upload повторить navbar как в React для мобильных 


COMPLETED:
1.загрузка шаблонов отдела с автосозданием родительского и ребенка (КЛАССОВОЕ view).
2.Автовысчитывание чистой зп. (возможны правки тк чутка не правильно высчитывает)
3.template и filter тэги (придумать куда использовать)
4. post\pre reciever чтобы проверять колличество rate не более 2 в сумме, для автовысчета total_salary 
4.1 починить логику высчитывания если rate = 1 
5. загрузка Шаблона файла сотрудников 
6. Перевод админки на русский.
7. Создание возможности гружения фото для STAFF (учитыать что грузится будет .zip а имя файла это id сотрудника)
8. Улучшение стандартной модели user 
9. кастомная админка с выполнением на лету.
10. Api запрос на основной сервер для получения данных (API REQUESTS к другой системе для получения нужных данных )
11. Api attendance/stats/ которая выводит дынные сколько всего сотрудников было в тот  день, сколько всего сотруднико, сколько сотрудников отстутсвовало а также сколько было на работе в промежуток с 8 до 6 вечера,
    есть лист present_data для все сотрудников у которых есть данные в тот день пишется pin, name, минут на работе высчитывается от last_out - firts_in, и сколько в % это от 8 часов
    также лист absent_data с теме кого не было данные pin и name
    принимает 2 get параметра не обязательных, pin и за какой дату искать, pin если есть данные выведется тот же present_data, если нет попадетм в absent_data. Дата по умолчанию стоит как сегодня, чтобы получить данные за вчера, данные в бд добавляются на следующий день
    Если в краце выполнен 
        ---- api/staff/ -- вернет всех staff за вчерашнюю дату по умолчанию, можно передать get параметры за какой период 
11.1. Подключен Кэш 
12.    Сериализаторы кастомные + стандартные 
    ---поправить Сериализаторы брать правильно данные для  api/department/  тоже самое но только по отделам (child)
13. Swagger
14. DOCSTRING 
15. api/staff/<user_id>/ -- инфа по пользователю первый и последний вход (за вчерашний день)
    ---- также учитывать день то есть суббота или воскресенье и если данные null то не двигать percent_for_period, если сотрудник был на работе и время привышало 1 час то надо percent_for_period умножить на 1.5
         если же отстутсовал в будний день отнять 25% от percent_for_period
16. Переезд на DRF + REACT
        Доступ к страницам только isAuthenticated
            ---- Использование токенов для авторизации 
                ---- просмотр в таблице всех отделов

17. Footer React 
18. пофиксить при выходе не только очищать куки но и перезагрузка

18.1 личная страница по каждому сотруднику с параметрами откуда до какого числа хотят получить данные  со страницы api/staff/pin
19. пофикшен баг UnboundLocalError: cannot access local variable 'total_weekend_days'
20. При открытии сотриднка запрос на 1 месяц ( можно поменять в будущем пока бд не сильно полная) если процентаж посещаемости за период выше 70% +10% к зп если выше 85 то плюс 15 и 95 + 20%
    ( old --> подсчет там же KPI приблизительно и \ или по умолчанию будет еще запрос за 1 месяц где можно проверить идею с  
            чем выше процент тем больше премиальных  (не 1 к 1 допустим 80% честности = 10% зп <--- просто пример для себя же))
20.1 когда открываешь отдел можно писать сколько в нем сотрудников (ЧИсто дизайн не обязательн)
20.2 пофиксить проблему когда выходной должно писать выходной а не нет данных
21. Починить когда общий процент ушел в минус но не должен был
22. пофиксить проблему после login нужна перезагрузка для появления username 
23. Развернуться на Linux
24. Скачивание excel убрать +1 день в оба параметра
25. Скачивание отчета по одному сотруднику 
26. Пофиксить выгрузку, чтобы ставился не ключ а значение 
27. Формы:
    27.2    Для загрузки праздников (excel, в upload) +++
28. вытащить эту логику из react 
          let bonusPercentage = 0;
            if (
                staffData &&
                Object.keys(staffData.attendance).length > 28 &&
                Object.keys(staffData.attendance).length < 32
            ) {
                const percent_for_period = staffData.percent_for_period;
                if (percent_for_period > 125) {
                if (percent_for_period >= 145) {
                    bonusPercentage = 20;
                } else if (percent_for_period >= 135) {
                    bonusPercentage = 15;
                } else {
                    bonusPercentage = 10;
                }
                }
            }

    Модель в которой меняют процент и bonus процент, и проверка будет идти на backend вернется как array в котором будет bool и int процента который может быть 
29. форма для ввода даты в attendance (React) + Mobile новый дизайн
30. выгрузка индивидуальаня поправить если удаленная работа или болезнь но был на работе выставить в клетку именно время (если таково есть) React

31. Формы:
31.1    Для уважительных причин (прямо на нужном сотруднике), тамже и скачать ее можно (Post запрос на создание и Get на скачивание в одной прям)

32. в dashboard поправить когда инпут ставит свою дату хотя есть ответ от апи по какой
32.1 в dashboard если дата завтра то не разрешать делать запрос
32.2 Инпут который меняется на текст пофиксить чтобы он дождался когда пользователь введет все, а не сразу делал запрос, пофиксить любим приятным способом для пользователя 
33. попробовать переписать логин api и user detail через хук или props или store чтобы navbar в desktop смотрелся также но более профессионально
34. Staffdetail в attendancetable пофиксить если всего времени 0 минут то не писать отстутсовал а писать 0:0 (в пк версии в мобильной нормально)
34.1 слегка переработать дизайн таблицы сделать его более приятный и лучше.
34.2 поправить анимацию в пк версии в attendancetable  на секунду появляется прокрутка по оси X 
35. FIXed если по токенам произошел logout очищать в localstorage и userprofile  
35.1 !!! нужно header сообщать о том что нужно обновить, как сделал при логине 
35.2 токенам задать expires не session а точное время (может на бэке передать сколько это в секундах чтобы было легче фронту)
36. childDepartment имеет слишком широкие рамки, сделать 1 в 1 как у department или слегка растянуть и department но тогда и staffdetail общую ширину переосмыслить 
36.1 кнопки на главную и назад вынести в один компонент и инклюдить, а также переосмыслить дизайн их сделать лучше и понятнее (вроде бы у мобильных версий именно так)

