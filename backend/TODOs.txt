

NEW Check Access, только админ сможет регистрировать пользователей,и также только пользователь с правами определенными сможет грузить файлы
 


6. DRF логика для фронта по описанию интерфейса примерно понятно что нужно:
        Доступ к страницам только isAuthenticated

    ---- api/staff/<user_id>/ -- инфа по пользователю первый и последний вход (за вчерашний день), 
    высчитывание премиальных от процента посещаемости за период для этого можно учитывать зп total, 
    чем выше процент тем больше премиальных  (не 1 к 1 допустим 80% честности = 10% зп <--- просто пример для себя же)
    также учитывать день то есть суббота или воскресенье и если данные null то не двигать percent_for_period, если сотрудник был на работе и время привышало 1 час то надо percent_for_period умножить на 1.5
    если же отстутсовал в будний день отнять 25% от percent_for_period



N-2. Используя KPI высчитывать премиальный (придумать просмотр логики допустим от 3 месяцев до 1 года)
N-1. Переезд на DRF + REACT
N-0.5 Сделать Полный React интерфейс для 
    ---- Использование токенов для авторизации 
    ---- просмотр в таблице всех
    ---- просмотр в таблице по отделам
    ---- точная информация по выбранному пользователю (ссылки по имени на подробную инфу), тут же можно показывать премиальные и коэфицент честности 
    ---- .....


N+2. Успеть дописать DOCSTRING 50 на 50  
N+3. Swagger  50 на 50
N+4. Развернуться на Linux




COMPLETED:
1.загрузка шаблонов отдела с автосозданием родительского и ребенка (КЛАССОВОЕ view).
2.Автовысчитывание чистой зп. (возможны правки тк чутка не правильно высчитывает)
3.template и filter тэги (придумать куда использовать)
4. post\pre reciever чтобы проверять колличество rate не более 2 в сумме, для автовысчета total_salary 
4.1 починить логику высчитывания если rate = 1 
5. загрузка Шаблона файла сотрудников 
6. Перевод админки на русский.
7. Создание возможности гружения фото для STAFF (учитыать что грузится будет .zip а имя файла это id сотрудника)
8. Улучшение стандартной модели user 
9. кастомная админка с выполнением на лету.
10. Api запрос на основной сервер для получения данных (API REQUESTS к другой системе для получения нужных данных )
11. Api attendance/stats/ которая выводит дынные сколько всего сотрудников было в тот  день, сколько всего сотруднико, сколько сотрудников отстутсвовало а также сколько было на работе в промежуток с 8 до 6 вечера,
    есть лист present_data для все сотрудников у которых есть данные в тот день пишется pin, name, минут на работе высчитывается от last_out - firts_in, и сколько в % это от 8 часов
    также лист absent_data с теме кого не было данные pin и name
    принимает 2 get параметра не обязательных, pin и за какой дату искать, pin если есть данные выведется тот же present_data, если нет попадетм в absent_data. Дата по умолчанию стоит как сегодня, чтобы получить данные за вчера, данные в бд добавляются на следующий день
    Если в краце выполнен 
        ---- api/staff/ -- вернет всех staff за вчерашнюю дату по умолчанию, можно передать get параметры за какой период 
11.1. Подключен Кэш 
12.    Сериализаторы кастомные + стандартные 
    ---поправить Сериализаторы брать правильно данные для  api/department/  тоже самое но только по отделам (child)